{"ast":null,"code":"import axios from \"axios\";\nimport { AuthActionType, authStore } from \"../Redux/AuthState\";\n\nclass AuthService {\n  // Register:\n  async register(user) {\n    // Send user object to backend, get back token:\n    const response = await axios.post(\"http://localhost:3001/api/auth/register\", user); // Extract token: \n\n    const token = response.data; // Save token in redux global state: \n\n    const action = {\n      type: AuthActionType.Register,\n      payload: token\n    };\n    authStore.dispatch(action);\n  } // Login: \n\n\n  async login(credentials) {\n    // Send credentials to backend:\n    const response = await axios.post(\"http://localhost:3030/api/auth/login\", credentials); // Extract token:\n\n    const token = response.data; // Save token in redux global state: \n\n    const action = {\n      type: AuthActionType.Login,\n      payload: token\n    };\n    authStore.dispatch(action);\n  } // Logout:\n\n\n  logout() {\n    // Logout in redux global state:\n    const action = {\n      type: AuthActionType.Logout\n    };\n    authStore.dispatch(action);\n  }\n\n}\n\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","AuthActionType","authStore","AuthService","register","user","response","post","token","data","action","type","Register","payload","dispatch","login","credentials","Login","logout","Logout","authService"],"sources":["/Users/alisher/Downloads/Northwind Full Stack/Frontend/src/Services/AuthService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport CredentialsModel from \"../Models/CredentialsModel\";\r\nimport UserModel from \"../Models/UserModel\";\r\nimport { AuthAction, AuthActionType, authStore } from \"../Redux/AuthState\";\r\n\r\nclass AuthService {\r\n\r\n    // Register:\r\n    public async register(user: UserModel): Promise<void> {\r\n\r\n        // Send user object to backend, get back token:\r\n        const response = await axios.post<string>(\"http://localhost:3001/api/auth/register\", user);\r\n\r\n        // Extract token: \r\n        const token = response.data;\r\n\r\n        // Save token in redux global state: \r\n        const action: AuthAction = { type: AuthActionType.Register, payload: token };\r\n        authStore.dispatch(action);\r\n    }\r\n\r\n    // Login: \r\n    public async login(credentials: CredentialsModel): Promise<void> {\r\n\r\n        // Send credentials to backend:\r\n        const response = await axios.post<string>(\"http://localhost:3030/api/auth/login\", credentials);\r\n\r\n        // Extract token:\r\n        const token = response.data;\r\n\r\n        // Save token in redux global state: \r\n        const action: AuthAction = { type: AuthActionType.Login, payload: token };\r\n        authStore.dispatch(action);\r\n    }\r\n\r\n    // Logout:\r\n    public logout(): void {\r\n\r\n        // Logout in redux global state:\r\n        const action: AuthAction = { type: AuthActionType.Logout };\r\n        authStore.dispatch(action);\r\n\r\n    }\r\n\r\n}\r\n\r\nconst authService = new AuthService();\r\n\r\nexport default authService;\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAAqBC,cAArB,EAAqCC,SAArC,QAAsD,oBAAtD;;AAEA,MAAMC,WAAN,CAAkB;EAEd;EACqB,MAARC,QAAQ,CAACC,IAAD,EAAiC;IAElD;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAmB,yCAAnB,EAA8DF,IAA9D,CAAvB,CAHkD,CAKlD;;IACA,MAAMG,KAAK,GAAGF,QAAQ,CAACG,IAAvB,CANkD,CAQlD;;IACA,MAAMC,MAAkB,GAAG;MAAEC,IAAI,EAAEV,cAAc,CAACW,QAAvB;MAAiCC,OAAO,EAAEL;IAA1C,CAA3B;IACAN,SAAS,CAACY,QAAV,CAAmBJ,MAAnB;EACH,CAda,CAgBd;;;EACkB,MAALK,KAAK,CAACC,WAAD,EAA+C;IAE7D;IACA,MAAMV,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAmB,sCAAnB,EAA2DS,WAA3D,CAAvB,CAH6D,CAK7D;;IACA,MAAMR,KAAK,GAAGF,QAAQ,CAACG,IAAvB,CAN6D,CAQ7D;;IACA,MAAMC,MAAkB,GAAG;MAAEC,IAAI,EAAEV,cAAc,CAACgB,KAAvB;MAA8BJ,OAAO,EAAEL;IAAvC,CAA3B;IACAN,SAAS,CAACY,QAAV,CAAmBJ,MAAnB;EACH,CA5Ba,CA8Bd;;;EACOQ,MAAM,GAAS;IAElB;IACA,MAAMR,MAAkB,GAAG;MAAEC,IAAI,EAAEV,cAAc,CAACkB;IAAvB,CAA3B;IACAjB,SAAS,CAACY,QAAV,CAAmBJ,MAAnB;EAEH;;AArCa;;AAyClB,MAAMU,WAAW,GAAG,IAAIjB,WAAJ,EAApB;AAEA,eAAeiB,WAAf"},"metadata":{},"sourceType":"module"}