{"ast":null,"code":"import { createStore } from \"redux\";\n// 1. State - This is the data:\nexport class ProductsState {\n  constructor() {\n    this.products = [];\n  } // Our global data.\n\n\n} // 2. Action Type - List of actions we can do on the above state\n\nexport let ProductsActionType; // 3. Action - Object for describing a single operation on the state: \n\n(function (ProductsActionType) {\n  ProductsActionType[\"FetchProducts\"] = \"FetchProducts\";\n  ProductsActionType[\"AddProduct\"] = \"AddProduct\";\n  ProductsActionType[\"UpdateProduct\"] = \"UpdateProduct\";\n  ProductsActionType[\"DeleteProduct\"] = \"DeleteProduct\";\n})(ProductsActionType || (ProductsActionType = {}));\n\n// 4. Reducer - function which performs the needed operation:\nexport function productsReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ProductsState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...currentState\n  }; // We must duplicate the original object\n  // Do the change on the newState: \n\n  switch (action.type) {\n    case ProductsActionType.FetchProducts:\n      // Here payload must be all products fetched from the server\n      newState.products = action.payload; // Set all fetched products to the state\n\n      break;\n\n    case ProductsActionType.AddProduct:\n      // Here payload must be the product to add\n      newState.products.push(action.payload); // Add the new product to the state\n\n      break;\n\n    case ProductsActionType.UpdateProduct:\n      // Here payload must be the product to update\n      const indexToUpdate = newState.products.findIndex(p => p.id === action.payload.id); // -1 if not exist\n\n      if (indexToUpdate >= 0) {\n        newState.products[indexToUpdate] = action.payload; // Update\n      }\n\n      break;\n\n    case ProductsActionType.DeleteProduct:\n      // Here payload must be id to delete\n      const indexToDelete = newState.products.findIndex(p => p.id === action.payload); // -1 if not exist\n\n      if (indexToDelete >= 0) {\n        newState.products.splice(indexToDelete, 1); // Delete\n      }\n\n      break;\n  }\n\n  return newState; // return the new state\n} // 5. Store - redux object for managing the global state:\n\nexport const productsStore = createStore(productsReducer);","map":{"version":3,"names":["createStore","ProductsState","products","ProductsActionType","productsReducer","currentState","action","newState","type","FetchProducts","payload","AddProduct","push","UpdateProduct","indexToUpdate","findIndex","p","id","DeleteProduct","indexToDelete","splice","productsStore"],"sources":["/Users/alisher/Downloads/Northwind Full Stack/Frontend/src/Redux/ProductsState.ts"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\n\r\n// 1. State - This is the data:\r\nexport class ProductsState {\r\n    public products: ProductModel[] = []; // Our global data.\r\n}\r\n\r\n// 2. Action Type - List of actions we can do on the above state\r\nexport enum ProductsActionType {\r\n    FetchProducts = \"FetchProducts\", // Fetch all products from backend\r\n    AddProduct = \"AddProduct\", // Add new product\r\n    UpdateProduct = \"UpdateProduct\", // Update existing product\r\n    DeleteProduct = \"DeleteProduct\" // Delete existing product\r\n}\r\n\r\n// 3. Action - Object for describing a single operation on the state: \r\nexport interface ProductsAction {\r\n    type: ProductsActionType; // Which operation we're going to do\r\n    payload: any; // Which data we're sending\r\n}\r\n\r\n// 4. Reducer - function which performs the needed operation:\r\nexport function productsReducer(currentState = new ProductsState(), action: ProductsAction): ProductsState {\r\n\r\n    const newState = { ...currentState }; // We must duplicate the original object\r\n\r\n    // Do the change on the newState: \r\n    switch (action.type) {\r\n\r\n        case ProductsActionType.FetchProducts: // Here payload must be all products fetched from the server\r\n            newState.products = action.payload; // Set all fetched products to the state\r\n            break;\r\n\r\n        case ProductsActionType.AddProduct: // Here payload must be the product to add\r\n            newState.products.push(action.payload); // Add the new product to the state\r\n            break;\r\n\r\n        case ProductsActionType.UpdateProduct: // Here payload must be the product to update\r\n            const indexToUpdate = newState.products.findIndex(p => p.id === action.payload.id); // -1 if not exist\r\n            if (indexToUpdate >= 0) {\r\n                newState.products[indexToUpdate] = action.payload; // Update\r\n            }\r\n            break;\r\n\r\n        case ProductsActionType.DeleteProduct: // Here payload must be id to delete\r\n            const indexToDelete = newState.products.findIndex(p => p.id === action.payload); // -1 if not exist\r\n            if (indexToDelete >= 0) {\r\n                newState.products.splice(indexToDelete, 1); // Delete\r\n            }\r\n            break;\r\n    }\r\n\r\n    return newState; // return the new state\r\n}\r\n\r\n// 5. Store - redux object for managing the global state:\r\nexport const productsStore = createStore(productsReducer);\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAGA;AACA,OAAO,MAAMC,aAAN,CAAoB;EAAA;IAAA,KAChBC,QADgB,GACW,EADX;EAAA,EACe;;;AADf,C,CAI3B;;AACA,WAAYC,kBAAZ,C,CAOA;;WAPYA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;EAAAA,kB;GAAAA,kB,KAAAA,kB;;AAaZ;AACA,OAAO,SAASC,eAAT,GAAoG;EAAA,IAA3EC,YAA2E,uEAA5D,IAAIJ,aAAJ,EAA4D;EAAA,IAAvCK,MAAuC;EAEvG,MAAMC,QAAQ,GAAG,EAAE,GAAGF;EAAL,CAAjB,CAFuG,CAEjE;EAEtC;;EACA,QAAQC,MAAM,CAACE,IAAf;IAEI,KAAKL,kBAAkB,CAACM,aAAxB;MAAuC;MACnCF,QAAQ,CAACL,QAAT,GAAoBI,MAAM,CAACI,OAA3B,CADJ,CACwC;;MACpC;;IAEJ,KAAKP,kBAAkB,CAACQ,UAAxB;MAAoC;MAChCJ,QAAQ,CAACL,QAAT,CAAkBU,IAAlB,CAAuBN,MAAM,CAACI,OAA9B,EADJ,CAC4C;;MACxC;;IAEJ,KAAKP,kBAAkB,CAACU,aAAxB;MAAuC;MACnC,MAAMC,aAAa,GAAGP,QAAQ,CAACL,QAAT,CAAkBa,SAAlB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASX,MAAM,CAACI,OAAP,CAAeO,EAAzD,CAAtB,CADJ,CACwF;;MACpF,IAAIH,aAAa,IAAI,CAArB,EAAwB;QACpBP,QAAQ,CAACL,QAAT,CAAkBY,aAAlB,IAAmCR,MAAM,CAACI,OAA1C,CADoB,CAC+B;MACtD;;MACD;;IAEJ,KAAKP,kBAAkB,CAACe,aAAxB;MAAuC;MACnC,MAAMC,aAAa,GAAGZ,QAAQ,CAACL,QAAT,CAAkBa,SAAlB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASX,MAAM,CAACI,OAAjD,CAAtB,CADJ,CACqF;;MACjF,IAAIS,aAAa,IAAI,CAArB,EAAwB;QACpBZ,QAAQ,CAACL,QAAT,CAAkBkB,MAAlB,CAAyBD,aAAzB,EAAwC,CAAxC,EADoB,CACwB;MAC/C;;MACD;EAtBR;;EAyBA,OAAOZ,QAAP,CA9BuG,CA8BtF;AACpB,C,CAED;;AACA,OAAO,MAAMc,aAAa,GAAGrB,WAAW,CAACI,eAAD,CAAjC"},"metadata":{},"sourceType":"module"}