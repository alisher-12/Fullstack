{"ast":null,"code":"import { Notyf } from \"notyf\"; // npm i notyf\n\nclass NotifyService {\n  constructor() {\n    this.notify = new Notyf({\n      duration: 4000,\n      position: {\n        x: \"center\",\n        y: \"top\"\n      }\n    });\n  }\n\n  // Display success message: \n  success(message) {\n    this.notify.success(message);\n  } // Display error message: \n\n\n  error(err) {\n    const message = this.extractErrorMessage(err);\n    this.notify.error(message);\n  }\n\n  extractErrorMessage(err) {\n    var _err$response, _err$response2;\n\n    // 1. If the err is the string message: \n    if (typeof err === \"string\") return err; // 2. If server response with error message to axios: \n\n    if (typeof ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) === \"string\") return err.response.data; // 3. If server response with array of error messages to axios: \n\n    if (Array.isArray((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.data)) return err.response.data[0]; // 4. If frontend throw new Error(\"something bad happened...\")\n\n    if (typeof err.message === \"string\") return err.message; // 5. On any other case: \n\n    console.log(err); // Check and update this code...\n\n    return \"Some error occurred, please try again\";\n  }\n\n}\n\nconst notifyService = new NotifyService();\nexport default notifyService;","map":{"version":3,"names":["Notyf","NotifyService","notify","duration","position","x","y","success","message","error","err","extractErrorMessage","response","data","Array","isArray","console","log","notifyService"],"sources":["/Users/alisher/Downloads/Northwind Full Stack/Frontend/src/Services/NotifyService.ts"],"sourcesContent":["import { Notyf } from \"notyf\"; // npm i notyf\r\n\r\nclass NotifyService {\r\n\r\n    // Private field for displaying cool messages (notifications)\r\n    private notify = new Notyf({ duration: 4000, position: { x: \"center\", y: \"top\"} });\r\n\r\n    // Display success message: \r\n    public success(message: string): void {\r\n        this.notify.success(message);\r\n    }\r\n\r\n    // Display error message: \r\n    public error(err: any): void {\r\n        const message = this.extractErrorMessage(err);\r\n        this.notify.error(message);\r\n    }\r\n\r\n    private extractErrorMessage(err: any): string {\r\n\r\n        // 1. If the err is the string message: \r\n        if(typeof err === \"string\") return err;\r\n\r\n        // 2. If server response with error message to axios: \r\n        if(typeof err.response?.data === \"string\") return err.response.data;\r\n\r\n        // 3. If server response with array of error messages to axios: \r\n        if(Array.isArray(err.response?.data)) return err.response.data[0];\r\n\r\n        // 4. If frontend throw new Error(\"something bad happened...\")\r\n        if(typeof err.message === \"string\") return err.message;\r\n\r\n        // 5. On any other case: \r\n        console.log(err); // Check and update this code...\r\n        return \"Some error occurred, please try again\";\r\n    }\r\n\r\n}\r\n\r\nconst notifyService = new NotifyService();\r\n\r\nexport default notifyService;\r\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,OAAtB,C,CAA+B;;AAE/B,MAAMC,aAAN,CAAoB;EAAA;IAAA,KAGRC,MAHQ,GAGC,IAAIF,KAAJ,CAAU;MAAEG,QAAQ,EAAE,IAAZ;MAAkBC,QAAQ,EAAE;QAAEC,CAAC,EAAE,QAAL;QAAeC,CAAC,EAAE;MAAlB;IAA5B,CAAV,CAHD;EAAA;;EAKhB;EACOC,OAAO,CAACC,OAAD,EAAwB;IAClC,KAAKN,MAAL,CAAYK,OAAZ,CAAoBC,OAApB;EACH,CARe,CAUhB;;;EACOC,KAAK,CAACC,GAAD,EAAiB;IACzB,MAAMF,OAAO,GAAG,KAAKG,mBAAL,CAAyBD,GAAzB,CAAhB;IACA,KAAKR,MAAL,CAAYO,KAAZ,CAAkBD,OAAlB;EACH;;EAEOG,mBAAmB,CAACD,GAAD,EAAmB;IAAA;;IAE1C;IACA,IAAG,OAAOA,GAAP,KAAe,QAAlB,EAA4B,OAAOA,GAAP,CAHc,CAK1C;;IACA,IAAG,yBAAOA,GAAG,CAACE,QAAX,kDAAO,cAAcC,IAArB,MAA8B,QAAjC,EAA2C,OAAOH,GAAG,CAACE,QAAJ,CAAaC,IAApB,CAND,CAQ1C;;IACA,IAAGC,KAAK,CAACC,OAAN,mBAAcL,GAAG,CAACE,QAAlB,mDAAc,eAAcC,IAA5B,CAAH,EAAsC,OAAOH,GAAG,CAACE,QAAJ,CAAaC,IAAb,CAAkB,CAAlB,CAAP,CATI,CAW1C;;IACA,IAAG,OAAOH,GAAG,CAACF,OAAX,KAAuB,QAA1B,EAAoC,OAAOE,GAAG,CAACF,OAAX,CAZM,CAc1C;;IACAQ,OAAO,CAACC,GAAR,CAAYP,GAAZ,EAf0C,CAexB;;IAClB,OAAO,uCAAP;EACH;;AAjCe;;AAqCpB,MAAMQ,aAAa,GAAG,IAAIjB,aAAJ,EAAtB;AAEA,eAAeiB,aAAf"},"metadata":{},"sourceType":"module"}