{"ast":null,"code":"import jwtDecode from \"jwt-decode\";\nimport { createStore } from \"redux\";\n// 1. State\nexport class AuthState {\n  constructor() {\n    this.token = null;\n    this.user = null;\n  }\n\n} // 2. Action Type\n\nexport let AuthActionType; // 3. Action\n\n(function (AuthActionType) {\n  AuthActionType[AuthActionType[\"Register\"] = 0] = \"Register\";\n  AuthActionType[AuthActionType[\"Login\"] = 1] = \"Login\";\n  AuthActionType[AuthActionType[\"Logout\"] = 2] = \"Logout\";\n})(AuthActionType || (AuthActionType = {}));\n\n// 4. Reducer\nexport function authReducer() {\n  let currentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthState();\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...currentState\n  };\n\n  switch (action.type) {\n    case AuthActionType.Register: // Here the payload is a token string\n\n    case AuthActionType.Login:\n      // Here the payload is a token string\n      newState.token = action.payload;\n      const container = jwtDecode(newState.token); // container is a wrapper object containing the user.\n\n      newState.user = container.user; // User object hidden inside the token\n\n      break;\n\n    case AuthActionType.Logout:\n      // Here we have no payload\n      newState.token = null;\n      newState.user = null;\n      break;\n  }\n\n  return newState;\n} // 5. Store\n\nexport const authStore = createStore(authReducer);","map":{"version":3,"names":["jwtDecode","createStore","AuthState","token","user","AuthActionType","authReducer","currentState","action","newState","type","Register","Login","payload","container","Logout","authStore"],"sources":["/Users/alisher/Downloads/Northwind Full Stack/Frontend/src/Redux/AuthState.ts"],"sourcesContent":["import jwtDecode from \"jwt-decode\";\r\nimport { createStore } from \"redux\";\r\nimport UserModel from \"../Models/UserModel\";\r\n\r\n// 1. State\r\nexport class AuthState {\r\n    public token: string = null;\r\n    public user: UserModel = null;\r\n}\r\n\r\n// 2. Action Type\r\nexport enum AuthActionType {\r\n    Register,\r\n    Login,\r\n    Logout\r\n}\r\n\r\n// 3. Action\r\nexport interface AuthAction {\r\n    type: AuthActionType;\r\n    payload?: string;\r\n}\r\n\r\n// 4. Reducer\r\nexport function authReducer(currentState = new AuthState(), action: AuthAction): AuthState {\r\n\r\n    const newState = {...currentState};\r\n\r\n    switch(action.type) {\r\n\r\n        case AuthActionType.Register: // Here the payload is a token string\r\n        case AuthActionType.Login: // Here the payload is a token string\r\n            newState.token = action.payload;\r\n            const container: { user: UserModel } = jwtDecode(newState.token); // container is a wrapper object containing the user.\r\n            newState.user = container.user; // User object hidden inside the token\r\n            break;\r\n\r\n        case AuthActionType.Logout: // Here we have no payload\r\n            newState.token = null;\r\n            newState.user = null;\r\n        break;\r\n    }\r\n\r\n    return newState;\r\n}\r\n\r\n// 5. Store\r\nexport const authStore = createStore(authReducer);\r\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;AAGA;AACA,OAAO,MAAMC,SAAN,CAAgB;EAAA;IAAA,KACZC,KADY,GACI,IADJ;IAAA,KAEZC,IAFY,GAEM,IAFN;EAAA;;AAAA,C,CAKvB;;AACA,WAAYC,cAAZ,C,CAMA;;WANYA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AAYZ;AACA,OAAO,SAASC,WAAT,GAAoF;EAAA,IAA/DC,YAA+D,uEAAhD,IAAIL,SAAJ,EAAgD;EAAA,IAA/BM,MAA+B;EAEvF,MAAMC,QAAQ,GAAG,EAAC,GAAGF;EAAJ,CAAjB;;EAEA,QAAOC,MAAM,CAACE,IAAd;IAEI,KAAKL,cAAc,CAACM,QAApB,CAFJ,CAEkC;;IAC9B,KAAKN,cAAc,CAACO,KAApB;MAA2B;MACvBH,QAAQ,CAACN,KAAT,GAAiBK,MAAM,CAACK,OAAxB;MACA,MAAMC,SAA8B,GAAGd,SAAS,CAACS,QAAQ,CAACN,KAAV,CAAhD,CAFJ,CAEsE;;MAClEM,QAAQ,CAACL,IAAT,GAAgBU,SAAS,CAACV,IAA1B,CAHJ,CAGoC;;MAChC;;IAEJ,KAAKC,cAAc,CAACU,MAApB;MAA4B;MACxBN,QAAQ,CAACN,KAAT,GAAiB,IAAjB;MACAM,QAAQ,CAACL,IAAT,GAAgB,IAAhB;MACJ;EAZJ;;EAeA,OAAOK,QAAP;AACH,C,CAED;;AACA,OAAO,MAAMO,SAAS,GAAGf,WAAW,CAACK,WAAD,CAA7B"},"metadata":{},"sourceType":"module"}