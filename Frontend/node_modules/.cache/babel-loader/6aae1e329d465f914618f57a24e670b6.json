{"ast":null,"code":"import axios from \"axios\";\nimport { productsStore, ProductsActionType } from \"../Redux/ProductsState\";\n\nclass ProductsService {\n  // Get all products from backend:\n  async getAllProducts() {\n    // Take products resides in redux global state:\n    let products = productsStore.getState().products; // If we have no products in global state - fetch them from server:\n\n    if (products.length === 0) {\n      // Fetch all products from backend:\n      const response = await axios.get(\"http://localhost:3001/api/products/delayed\"); // Extract products from axios response:\n\n      products = response.data; // Save fetched products in global state:\n\n      const action = {\n        type: ProductsActionType.FetchProducts,\n        payload: products\n      };\n      productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\n    } // Return products:\n\n\n    return products;\n  } // Get one product by id:\n\n\n  async getOneProduct(id) {\n    // Desired product: \n    let product; // Take products resides in redux global state:\n\n    let products = productsStore.getState().products; // If we have no products in global state - fetch given product from server:\n\n    if (products.length === 0) {\n      // Fetch one product from backend:\n      const response = await axios.get(\"http://localhost:3030/api/products/delayed/\" + id); // Take fetched product:\n\n      product = response.data;\n    } else {\n      // Take product from redux:\n      product = products.find(p => p.id === id);\n    } // Return product:\n\n\n    return product;\n  } // Add new product: \n\n\n  async addProduct(product) {\n    // Convert ProductModel into FormData because we need to send text + image:\n    const formData = new FormData();\n    formData.append(\"name\", product.name);\n    formData.append(\"price\", product.price.toString());\n    formData.append(\"stock\", product.stock.toString());\n    formData.append(\"image\", product.image[0]); // Send product to backend: \n\n    const response = await axios.post(\"http://localhost:3001/api/products\", formData);\n    const addedProduct = response.data; // Send added product to redux global state: \n\n    const action = {\n      type: ProductsActionType.AddProduct,\n      payload: addedProduct\n    };\n    productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\n  } // Update product: \n\n\n  async updateProduct(product) {\n    // Convert ProductModel into FormData because we need to send text + image:\n    const formData = new FormData();\n    formData.append(\"name\", product.name);\n    formData.append(\"price\", product.price.toString());\n    formData.append(\"stock\", product.stock.toString());\n    formData.append(\"image\", product.image[0]); // Send product to backend: \n\n    const response = await axios.put(\"http://localhost:3030/api/products/\" + product.id, formData);\n    const updatedProduct = response.data; // Send updated product to redux global state:\n\n    const action = {\n      type: ProductsActionType.UpdateProduct,\n      payload: updatedProduct\n    };\n    productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\n  } // Delete product: \n\n\n  async deleteProduct(id) {\n    // Delete this product in backend: \n    await axios.delete(\"http://localhost:3030/api/products/\" + id); // Delete this product also in redux global state: \n\n    const action = {\n      type: ProductsActionType.DeleteProduct,\n      payload: id\n    };\n    productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\n  }\n\n}\n\nconst productsService = new ProductsService();\nexport default productsService;","map":{"version":3,"names":["axios","productsStore","ProductsActionType","ProductsService","getAllProducts","products","getState","length","response","get","data","action","type","FetchProducts","payload","dispatch","getOneProduct","id","product","find","p","addProduct","formData","FormData","append","name","price","toString","stock","image","post","addedProduct","AddProduct","updateProduct","put","updatedProduct","UpdateProduct","deleteProduct","delete","DeleteProduct","productsService"],"sources":["/Users/alisher/Downloads/Northwind Full Stack/Frontend/src/Services/ProductsService.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport ProductModel from \"../Models/ProductModel\";\r\nimport { productsStore, ProductsAction, ProductsActionType } from \"../Redux/ProductsState\";\r\n\r\nclass ProductsService {\r\n\r\n    // Get all products from backend:\r\n    public async getAllProducts(): Promise<ProductModel[]> {\r\n\r\n        // Take products resides in redux global state:\r\n        let products = productsStore.getState().products;\r\n\r\n        // If we have no products in global state - fetch them from server:\r\n        if (products.length === 0) {\r\n\r\n            // Fetch all products from backend:\r\n            const response = await axios.get<ProductModel[]>(\"http://localhost:3001/api/products/delayed\");\r\n\r\n            // Extract products from axios response:\r\n            products = response.data;\r\n\r\n            // Save fetched products in global state:\r\n            const action: ProductsAction = { type: ProductsActionType.FetchProducts, payload: products };\r\n            productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\r\n\r\n        }\r\n\r\n        // Return products:\r\n        return products;\r\n    }\r\n\r\n    // Get one product by id:\r\n    public async getOneProduct(id: number): Promise<ProductModel> {\r\n\r\n        // Desired product: \r\n        let product;\r\n\r\n        // Take products resides in redux global state:\r\n        let products = productsStore.getState().products;\r\n\r\n        // If we have no products in global state - fetch given product from server:\r\n        if (products.length === 0) {\r\n\r\n            // Fetch one product from backend:\r\n            const response = await axios.get<ProductModel>(\"http://localhost:3030/api/products/delayed/\" + id);\r\n\r\n            // Take fetched product:\r\n            product = response.data;\r\n        }\r\n        else {\r\n\r\n            // Take product from redux:\r\n            product = products.find(p => p.id === id);\r\n        }\r\n\r\n        // Return product:\r\n        return product;\r\n    }\r\n\r\n    // Add new product: \r\n    public async addProduct(product: ProductModel): Promise<void> {\r\n\r\n        // Convert ProductModel into FormData because we need to send text + image:\r\n        const formData = new FormData();\r\n        formData.append(\"name\", product.name);\r\n        formData.append(\"price\", product.price.toString());\r\n        formData.append(\"stock\", product.stock.toString());\r\n        formData.append(\"image\", product.image[0]);\r\n\r\n        // Send product to backend: \r\n        const response = await axios.post<ProductModel>(\"http://localhost:3001/api/products\", formData);\r\n        const addedProduct: ProductModel = response.data;\r\n\r\n        // Send added product to redux global state: \r\n        const action: ProductsAction = { type: ProductsActionType.AddProduct, payload: addedProduct };\r\n        productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\r\n    }\r\n\r\n    // Update product: \r\n    public async updateProduct(product: ProductModel): Promise<void> {\r\n\r\n        // Convert ProductModel into FormData because we need to send text + image:\r\n        const formData = new FormData();\r\n        formData.append(\"name\", product.name);\r\n        formData.append(\"price\", product.price.toString());\r\n        formData.append(\"stock\", product.stock.toString());\r\n        formData.append(\"image\", product.image[0]);\r\n\r\n        // Send product to backend: \r\n        const response = await axios.put<ProductModel>(\"http://localhost:3030/api/products/\" + product.id, formData);\r\n        const updatedProduct = response.data;\r\n\r\n        // Send updated product to redux global state:\r\n        const action: ProductsAction = { type: ProductsActionType.UpdateProduct, payload: updatedProduct };\r\n        productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\r\n    }\r\n\r\n    // Delete product: \r\n    public async deleteProduct(id: number): Promise<void> {\r\n\r\n        // Delete this product in backend: \r\n        await axios.delete(\"http://localhost:3030/api/products/\" + id);\r\n\r\n        // Delete this product also in redux global state: \r\n        const action: ProductsAction = { type: ProductsActionType.DeleteProduct, payload: id };\r\n        productsStore.dispatch(action); // Redux will call productsReducer to perform this action.\r\n    }\r\n\r\n}\r\n\r\nconst productsService = new ProductsService();\r\n\r\nexport default productsService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}